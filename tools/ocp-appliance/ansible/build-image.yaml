---
- name: Build the Disk Image - Lab
  hosts: localhost

  vars_files:
    - vars.yaml
    - vars_secret.yaml

  tasks:
    - name: Remove old directories
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "../output/image-base"
        - "../tmp-files/image-base"

    - name: Ensure directories exists
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ appliance_assets_image }}"
        - "../tmp-files/image-base"
        - "../output/image-base"

    #- name: Generate appliance config template
    #  ansible.builtin.shell: |
    #    export REGISTRY_AUTH_FILE=~/.config/containers/auth.json
    #    podman run --rm -it --pull newer -v ../tmp-files/image-base:/assets:Z {{ appliance_image_preinstall }} generate-config

    - name: Ensure openshift manifests directory exists
      ansible.builtin.file:
        path: "../tmp-files/image-base/openshift"
        state: directory

    - name: Check for appliance config template file
      ansible.builtin.stat:
        path: "{{ appliance_config_file }}"
      register: appliance_config_check

    - name: Read appliance config template file
      ansible.builtin.include_vars:
        file: "{{ appliance_config_file }}"
      when: appliance_config_check.stat.exists

    - name: Configure appliance-config.yaml
      ansible.builtin.template:
        src: "{{ appliance_config_file }}"
        dest: "../tmp-files/image-base/appliance-config.yaml"
      when: appliance_config_check.stat.exists

    # Check for custom manifests files
    - name: Ensure tm run openshift directory exists
      ansible.builtin.file:
        path: "../tmp-files/image-base/openshift"
        state: directory

    - name: Check for custom manifests files
      ansible.builtin.find:
        paths: "{{ custom_manifests_dir }}"
        patterns:
          - "*.yaml"
          - "*.yml"
        recurse: yes
        file_type: file
      register: manifests

    - name: Copy all custom manifests files to target directory without subdirectories
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "../tmp-files/image-base/openshift/{{ item.path | basename }}"
      with_items: "{{ manifests.files }}"
      when: manifests.matched > 0

    # Check for custom images file
    - name: Check for custom images file
      ansible.builtin.stat:
        path: "{{ custom_images_file }}"
      register: custom_images_check_yaml

    - name: Append custom images to appliance-config.yaml
      ansible.builtin.blockinfile:
        path: "../tmp-files/image-base/appliance-config.yaml"
        block: |
          {{ lookup('file', custom_images_file) }}
        marker: "# {mark} CUSTOM IMAGES"
      when: custom_images_file is defined and custom_images_file | length > 0

    # Check for custom operators file
    - name: Check for custom operators file
      ansible.builtin.stat:
        path: "{{ custom_operators_file }}"
      register: custom_operators_check_yaml

    - name: Append operators to appliance-config.yaml
      ansible.builtin.blockinfile:
        path: "../tmp-files/image-base/appliance-config.yaml"
        block: |
          {{ lookup('file', custom_operators_file) }}
        marker: "# {mark} CUSTOM OPERATORS"
      when: custom_operators_check_yaml is defined and custom_operators_check_yaml | length > 0

    # Create image

    - name: Clean
      become: true
      ansible.builtin.shell: |
        podman run --rm -it -v ../tmp-files/image-base:/assets:Z {{ appliance_image_preinstall }} clean
      register: build_result

    - name: Build the appliance disk image raw
      become: true
      ansible.builtin.shell: |
        podman run --rm -it --pull newer --privileged --net=host -v ../tmp-files/image-base:/assets:Z {{ appliance_image_preinstall }} build
      register: build_result

    - name: Copy ISO post deployment script
      ansible.builtin.copy:
        src: "{{ iso_post_deployment_script}}"
        dest: "../tmp-files/image-base/{{ iso_post_deployment_script | basename }}"

    - name: Build the appliance ISO
      become: true
      ansible.builtin.shell: |
        podman run --rm -it --privileged -v ../tmp-files/image-base:/assets:Z {{ appliance_image_preinstall }} build iso --post-script {{ iso_post_deployment_script | basename }} --target-device {{ appliance_target_dev }}
      register: build_result

    - name: Move the appliance.raw to the output directory 
      ansible.builtin.shell: "mv -f ../tmp-files/image-base/{{ item }} ../output/image-base"
      with_items:
        - appliance.raw
        - appliance.iso


    - name: RAW deployment info
      ansible.builtin.debug:
        msg: |
          *******************************************
          *     INFORMATION TO USE THE RAW file     *
          *******************************************

          If you specified the 'diskSizeGB' you can copy the RAW image into your device with this command:
          
              dd if=appliance.raw of={{ appliance_target_dev }} bs=1M status=progress

          If you didn't include information about disk size, you can run  resize and clone the disk image with:

              sudo podman run --rm -it --privileged --net=host \
                -v ../tmp-files/image-base:/assets \
                --entrypoint virt-resize {{ appliance_image_preinstall }} \
                --expand /dev/sda4 /assets/appliance.raw {{ appliance_target_dev }} --no-sparse

          You can also use directly the RAW file as VM drive.

